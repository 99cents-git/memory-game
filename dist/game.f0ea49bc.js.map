{"version":3,"sources":["assets/game.js"],"names":["selectors","boardContainer","document","querySelector","board","moves","timer","start","win","state","gameStarted","flippedCards","totalFlips","totalTime","loop","shuffle","array","clonedArray","index","length","randomIndex","Math","floor","random","original","pickRandom","items","randomPicks","push","splice","generateGame","emojis","dimensions","getAttribute","Error","picks","cards","map","item","join","parser","DOMParser","parseFromString","replaceWith","startGame","flipBackCards","querySelectorAll","forEach","card","classList","remove","flipCard","add","setTimeout","clearInterval","attachEventListeners","addEventListener","event","eventTarget","target","eventParent","parentElement","className","includes","window","parent","postMessage"],"mappings":"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","file":"game.f0ea49bc.js","sourceRoot":"..","sourcesContent":["const selectors = {\r\n  boardContainer: document.querySelector('.board-container'),\r\n  board: document.querySelector('.board'),\r\n  moves: document.querySelector('.moves'),\r\n  timer: document.querySelector('.timer'),\r\n  start: document.querySelector('button'),\r\n  win: document.querySelector('.win')\r\n}\r\n\r\nconst state = {\r\n  gameStarted: false,\r\n  flippedCards: 0,\r\n  totalFlips: 0,\r\n  totalTime: 0,\r\n  loop: null\r\n}\r\n\r\nconst shuffle = array => {\r\n  const clonedArray = [...array]\r\n\r\n  for (let index = clonedArray.length - 1; index > 0; index--) {\r\n    const randomIndex = Math.floor(Math.random() * (index + 1))\r\n    const original = clonedArray[index]\r\n    clonedArray[index] = clonedArray[randomIndex]\r\n    clonedArray[randomIndex] = original\r\n  }\r\n\r\n  return clonedArray\r\n}\r\n\r\nconst pickRandom = (array, items) => {\r\n  const clonedArray = [...array]\r\n  const randomPicks = []\r\n\r\n  for (let index = 0; index < items; index++) {\r\n    const randomIndex = Math.floor(Math.random() * clonedArray.length)\r\n    randomPicks.push(clonedArray[randomIndex])\r\n    clonedArray.splice(randomIndex, 1)\r\n  }\r\n\r\n  return randomPicks\r\n}\r\n\r\nconst generateGame = (emojis) => {\r\n  const dimensions = selectors.board.getAttribute('data-dimension')\r\n\r\n  if (dimensions % 2 !== 0) {\r\n    throw new Error(\"The dimension of the board must be an even number.\")\r\n  }\r\n\r\n  const picks = pickRandom(emojis, (dimensions * dimensions) / 2)\r\n  const items = shuffle([...picks, ...picks])\r\n  const cards = `\r\n        <div class=\"board\" style=\"grid-template-columns: repeat(${dimensions}, auto)\">\r\n            ${items.map(item => `\r\n                <div class=\"card\" data-id=\"${item}\">\r\n                    <div class=\"card-front\"></div>\r\n                    <div class=\"card-back\"><img style=\"width:100%; max-width: 100%; height: auto;\" src=\"${item}\"/></div>\r\n                </div>\r\n            `).join('')}\r\n       </div>\r\n    `\r\n\r\n  const parser = new DOMParser().parseFromString(cards, 'text/html')\r\n\r\n  selectors.board.replaceWith(parser.querySelector('.board'))\r\n}\r\n\r\nconst startGame = () => {\r\n  state.gameStarted = true\r\n}\r\n\r\nconst flipBackCards = () => {\r\n  document.querySelectorAll('.card:not(.matched)').forEach(card => {\r\n    card.classList.remove('flipped')\r\n  })\r\n\r\n  state.flippedCards = 0\r\n}\r\n\r\nconst flipCard = card => {\r\n  state.flippedCards++\r\n  state.totalFlips++\r\n\r\n  if (!state.gameStarted) {\r\n    startGame()\r\n  }\r\n\r\n  if (state.flippedCards <= 2) {\r\n    card.classList.add('flipped')\r\n  }\r\n\r\n  if (state.flippedCards === 2) {\r\n    const flippedCards = document.querySelectorAll('.flipped:not(.matched)')\r\n    if (flippedCards[0].getAttribute('data-id') === flippedCards[1].getAttribute('data-id')) {\r\n      flippedCards[0].classList.add('matched')\r\n      flippedCards[1].classList.add('matched')\r\n\r\n      setTimeout(() => {\r\n        flippedCards[0].classList.add('animate__animated')\r\n        flippedCards[0].classList.add('animate__tada')\r\n        flippedCards[1].classList.add('animate__animated')\r\n        flippedCards[1].classList.add('animate__tada')\r\n      }, 600)\r\n    }\r\n\r\n    setTimeout(() => {\r\n      flipBackCards()\r\n    }, 1000)\r\n  }\r\n\r\n  // If there are no more cards that we can flip, we won the game\r\n  if (!document.querySelectorAll('.card:not(.flipped)').length) {\r\n    setTimeout(() => {\r\n      selectors.boardContainer.classList.add('flipped')\r\n      clearInterval(state.loop)\r\n    }, 1000)\r\n  }\r\n}\r\n\r\nconst attachEventListeners = () => {\r\n\r\n  document.querySelectorAll('.card').forEach(item => {\r\n    item.addEventListener('click', event => {\r\n      const eventTarget = event.target\r\n      const eventParent = eventTarget.parentElement\r\n      if (!eventParent.className.includes('flipped')) {\r\n        flipCard(eventParent)\r\n      }\r\n    })\r\n  })\r\n\r\n  /*document.addEventListener('click', event => {\r\n      const eventTarget = event.target\r\n      const eventParent = eventTarget.parentElement\r\n\r\n      if (eventTarget.className.includes('card') && !eventParent.className.includes('flipped')) {\r\n          flipCard(eventParent)\r\n      } else if (eventTarget.nodeName === 'BUTTON' && !eventTarget.className.includes('disabled')) {\r\n          startGame()\r\n      }\r\n  })*/\r\n}\r\n\r\ngenerateGame([\r\n  'mini-1.png',\r\n  'mini-2.png',\r\n  'mini-3.png',\r\n  'mini-4.png',\r\n  'mini-5.png',\r\n  'mini-6.png',\r\n  'mini-7.png',\r\n  'mini-8.png',\r\n  'mini-9.png',\r\n  'mini-10.png',\r\n  'mini-11.png',\r\n  'mini-12.png',\r\n  'mini-13.png',\r\n  'mini-14.png',\r\n  'mini-15.png',\r\n  'mini-16.png',\r\n  'mini-17.png',\r\n  'mini-18.png',\r\n  'mini-19.png',\r\n  'mini-20.png',\r\n  'mini-21.png',\r\n  'mini-22.png',\r\n  'mini-23.png',\r\n  'mini-24.png',\r\n])\r\nattachEventListeners();\r\nwindow.parent.postMessage('ready')\r\n\r\n\r\n"]}